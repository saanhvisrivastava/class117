# -*- coding: utf-8 -*-
"""class117.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xLuqOIRXuBlwXMeNqqplSIjWPQgxjiB8
"""

import pandas as pd

df = pd.read_csv("class117data.csv")

print(df.head())  # To display top 5 value from df

from sklearn.model_selection import train_test_split 

age = df["age"]
heart_attack = df["target"]

age_train, age_test, heart_attack_train, heart_attack_test = train_test_split(age, heart_attack, test_size = 0.25, random_state = 0)

from sklearn.linear_model import LogisticRegression
import numpy as np

X = np.reshape(age_train.ravel(), (len(age_train), 1))
Y = np.reshape(heart_attack_train.ravel(), (len(heart_attack_train), 1))

classifier = LogisticRegression(random_state = 0) 
classifier.fit(X, Y)

import numpy as np

X_test = np.reshape(age_test.ravel(), (len(age_test), 1))
Y_test = np.reshape(heart_attack_test.ravel(), (len(heart_attack_test), 1))

heart_attack_prediction = classifier.predict(X_test)

predicted_values = []
for i in heart_attack_prediction:
  if i == 0:
    predicted_values.append("No")
  else:
    predicted_values.append("Yes")

actual_values = []
for i in Y_test.ravel():
  if i == 0:
    actual_values.append("No")
  else:
    actual_values.append("Yes")

from sklearn.metrics import confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt 

labels = ["Yes", "No"]

cm = confusion_matrix(actual_values, predicted_values, labels)

ax= plt.subplot()
sns.heatmap(cm, annot=True, ax = ax)

ax.set_xlabel('Predicted')
ax.set_ylabel('Actual') 
ax.set_title('Confusion Matrix')
ax.xaxis.set_ticklabels(labels); ax.yaxis.set_ticklabels(labels)

"""accuracy = 36 + 16 / 36 + 16 + 17 + 7 accuracy = 52 / 76 accuracy = 0.68421052631"""

factors=df[['age','sex','cp','chol','thalach']]

heart_attack=df['target']

factors_train,factors_test,heart_attack_train,heart_attack_test=train_test_split(factors,heart_attack,test_size=0.25,random_state=0)

factors=df[['age','sex','cp','chol','thalach']]

heart_attack=df['target']

factors_train,factors_test,heart_attack_train,heart_attack_test=train_test_split(factors,heart_attack,test_size=0.25,random_state=0)




from sklearn.preprocessing import StandardScaler

sc_x=StandardScaler()
factors_train=sc_x.fit_transform(factors_train)

factors_test=sc_x.fit_transform(factors_test)

classifier2=LogisticRegression(random_state=0)

classifier2.fit(factors_train,heart_attack_train)
heart_attack_prediction1=classifier2.predict(factors_test)

predicted_value1=[]

for i in heart_attack_prediction1:
  if i==0:
    predicted_value1.append('No')
  else:
    predicted_value1.append('Yes')

actual_data=[]

for i in heart_attack_test.ravel():
  if i==0:
    actual_data.append('No')
  else:
    actual_data.append('Yes')

print(predicted_value1)

print(actual_data)

import seaborn as sms

cm=confusion_matrix(actual_data,predicted_value1,labels)
ax=plt.subplot()
sms.heatmap(cm,annot=True,ax=ax)
ax.set_xlabel('predicted1')
ax.set_ylabel('actual_data')
ax.set_title('Confusion metrics for multiple values')
ax.xaxis.set_ticklabels(labels)
ax.yaxis.set_ticklabels(labels)

"""33+23/33+10+10+23=0.736"""